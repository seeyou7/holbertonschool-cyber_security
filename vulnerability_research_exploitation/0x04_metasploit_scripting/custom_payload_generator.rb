require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  def initialize
    super(
      'Name'        => 'Custom Port Scanner',
      'Description' => 'Scans a range of ports to identify open ones',
      'Author'      => ['idoudi2020'],
      'License'     => MSF_LICENSE
    )

    register_options(
      [
        Opt::RHOST('Target IP address or hostname', [true, 'Target IP to scan', '127.0.0.1']),
        OptInt.new('STARTPORT', [true, 'Start of port range to scan', 1]),
        OptInt.new('ENDPORT', [true, 'End of port range to scan', 65535])
      ]
    )
  end

  def run
    # Get option values
    rhost = datastore['RHOST']
    start_port = datastore['STARTPORT']
    end_port = datastore['ENDPORT']

    print_status("Starting port scan on #{rhost} from port #{start_port} to #{end_port}")

    # Track the number of open ports
    open_ports = []

    # Port scan
    (start_port..end_port).each do |port|
      begin
        sock = connect(nil, rhost, port, 1) # Try to connect to the port
        print_good("Port #{port} is open on #{rhost}")
        open_ports << port  # Add the open port to the list
        disconnect(sock)    # Close the connection
      rescue Rex::ConnectionError
        # Could not connect to the port (closed or filtered)
      end
    end

    # Print summary
    if open_ports.any?
      print_status("Port scan completed. Found open ports: #{open_ports.join(', ')}")
    else
      print_status("Port scan completed. No open ports found.")
    end
  end
end

