require 'msf/core'

class Metasploit3 < Msf::Auxiliary
  include Msf::Auxiliary::Scanner

  def initialize
    super
    self.name = 'Custom Port Scanner'
    self.version = '1.0'
    self.description = 'Scans a range of ports on a target system and identifies which ones are open.'
    self.author = 'Tu nombre'
    self.license = MSF_LICENSE

    register_options(
      [
        Opt::RHOST,
        OptInt.new('STARTPORT', [true, 'The starting port number', 1]),
        OptInt.new('ENDPORT', [true, 'The ending port number', 65535])
      ], self.class
    )
  end

  def run_host(ip)
    start_port = datastore['STARTPORT'].to_i
    end_port = datastore['ENDPORT'].to_i

    print_status("Running module against #{ip}")

    open_ports = []

    (start_port..end_port).each do |port|
      begin
        sock = Rex::Socket::Tcp.new
        sock.connect(ip, port, 5)
        sock.close
        open_ports << port
        print_good("#{ip}:#{port} - Port #{port} is open on #{ip}")
      rescue Rex::ConnectionError
        # No hacer nada, el puerto estÃ¡ cerrado
      end
    end

    if open_ports.empty?
      print_status("#{ip} - No open ports found")
    else
      print_good("#{ip} - Open ports on #{ip}: #{open_ports.join(', ')}")
    end
  end
end
