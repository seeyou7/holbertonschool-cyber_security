#!/bin/bash

# ğŸ”¹ Ã‰tape 1 : Extraire les 1000 derniÃ¨res lignes du fichier auth.log
# Pourquoi ? Pour limiter l'analyse aux Ã©vÃ©nements rÃ©cents, plus pertinents.
tail -n 1000 auth.log > 1000.log

# ğŸ”¹ DÃ©finir le fichier de log Ã  analyser (variable utilisÃ©e ensuite)
log_file=1000.log

# ğŸ”¹ Ã‰tape 2 : Extraire toutes les lignes contenant "Failed password"
# Cela correspond aux tentatives de connexion Ã©chouÃ©es

failed_passwords=$(grep 'Failed password' "$log_file")

# ğŸ”¹ Ã‰tape 3 : Extraire toutes les lignes contenant "Accepted password"
# Cela correspond aux connexions rÃ©ussies

accepted_passwords=$(grep 'Accepted password' "$log_file")

# ğŸ”¹ Ã‰tape 4 : Extraire les noms dâ€™utilisateurs dans les tentatives Ã©chouÃ©es
# Dans les logs SSH, l'utilisateur est gÃ©nÃ©ralement Ã  la 9e colonne
# Exemple :
# "Failed password for root from 192.168.1.1 ..." â†’ $9 = root

failed_users=$(echo "$failed_passwords" | awk '{print $9}' | sort | uniq)

# ğŸ”¹ Ã‰tape 5 : Extraire les noms dâ€™utilisateurs pour les connexions rÃ©ussies
# MÃªme logique que ci-dessus

accepted_users=$(echo "$accepted_passwords" | awk '{print $9}' | sort | uniq)

# ğŸ”¹ Ã‰tape 6 : Comparer les deux listes et trouver les utilisateurs communs
# `comm -12` affiche les lignes communes entre les deux listes triÃ©es
# Ce sont les utilisateurs qui ont eu Ã  la fois des Ã©checs et une rÃ©ussite

common_users=$(comm -12 <(echo "$failed_users") <(echo "$accepted_users"))

# ğŸ”¹ Ã‰tape 7 : Afficher le ou les utilisateurs potentiellement compromis

echo "$common_users"

